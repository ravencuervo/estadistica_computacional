resultados[i] <- total_clases  # Limitar las inasistencias al total de clases
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias, donde el usuario quiere que haya 15 asistencias
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_clases = 30, asistencias_usuario = 15)
print(asistencias)
# Generar 10 números de inasistencias, donde el usuario quiere que haya 5 inasistencias
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_clases = 30, inasistencias_usuario = 5)
print(inasistencias)
# Método Congruencial Lineal (MCL) para generar números aleatorios
# Este script implementa el generador MCL para la simulación de asistencias e inasistencias en la universidad.
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_clases = 30, asistencias_usuario = NULL, inasistencias_usuario = NULL) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Validar si el usuario ha proporcionado un valor de asistencias o inasistencias
if (tipo == "asistencias" && !is.null(asistencias_usuario)) {
if (asistencias_usuario > total_clases) {
stop("El número de asistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de asistencias, asignarlo directamente
return(rep(asistencias_usuario, n))
}
if (tipo == "inasistencias" && !is.null(inasistencias_usuario)) {
if (inasistencias_usuario > total_clases) {
stop("El número de inasistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de inasistencias, asignarlo directamente
return(rep(inasistencias_usuario, n))
}
# Si no se proporcionan valores, generar números aleatorios
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)  # Asegurar que no exceda el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)
if (resultados[i] > total_clases) {
resultados[i] <- total_clases  # Limitar las inasistencias al total de clases
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias, donde el usuario quiere que haya 15 asistencias
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_clases = 30, asistencias_usuario = 15)
print(asistencias)
# Generar 10 números de inasistencias, donde el usuario quiere que haya 5 inasistencias
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_clases = 30, inasistencias_usuario = 5)
print(inasistencias)
# Método Congruencial Lineal (MCL) para generar números aleatorios
# Este script implementa el generador MCL para la simulación de asistencias e inasistencias en la universidad.
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_clases = 30, asistencias_usuario = NULL, inasistencias_usuario = NULL) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Validar si el usuario ha proporcionado un valor de asistencias o inasistencias
if (tipo == "asistencias" && !is.null(asistencias_usuario)) {
if (asistencias_usuario > total_clases) {
stop("El número de asistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de asistencias, asignarlo directamente
return(rep(asistencias_usuario, n))
}
if (tipo == "inasistencias" && !is.null(inasistencias_usuario)) {
if (inasistencias_usuario > total_clases) {
stop("El número de inasistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de inasistencias, asignarlo directamente
return(rep(inasistencias_usuario, n))
}
# Si no se proporcionan valores, generar números aleatorios
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)  # Asegurar que no exceda el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)
if (resultados[i] > total_clases) {
resultados[i] <- total_clases  # Limitar las inasistencias al total de clases
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias, donde el usuario quiere que haya 15 asistencias
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_clases = 30, asistencias_usuario = 15)
print(asistencias)
# Generar 10 números de inasistencias, donde el usuario quiere que haya 5 inasistencias
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_clases = 30, inasistencias_usuario = 5)
print(inasistencias)
# Método Congruencial Lineal (MCL) para generar números aleatorios
# Este script implementa el generador MCL para la simulación de asistencias e inasistencias en la universidad.
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_clases = 30, asistencias_usuario = NULL, inasistencias_usuario = NULL) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Validar si el usuario ha proporcionado un valor de asistencias o inasistencias
if (tipo == "asistencias" && !is.null(asistencias_usuario)) {
if (asistencias_usuario > total_clases) {
stop("El número de asistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de asistencias, asignarlo directamente
return(rep(asistencias_usuario, n))
}
if (tipo == "inasistencias" && !is.null(inasistencias_usuario)) {
if (inasistencias_usuario > total_clases) {
stop("El número de inasistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de inasistencias, asignarlo directamente
return(rep(inasistencias_usuario, n))
}
# Si no se proporcionan valores, generar números aleatorios
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)  # Asegurar que no exceda el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)
if (resultados[i] > total_clases) {
resultados[i] <- total_clases  # Limitar las inasistencias al total de clases
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias, donde el usuario quiere que haya 15 asistencias
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_clases = 30, asistencias_usuario = 15)
print(asistencias)
# Generar 10 números de inasistencias, donde el usuario quiere que haya 5 inasistencias
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_clases = 30, inasistencias_usuario = 5)
print(inasistencias)
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_clases = 30, asistencias_usuario = NULL, inasistencias_usuario = NULL) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Validar si el usuario ha proporcionado un valor de asistencias o inasistencias
if (tipo == "asistencias" && !is.null(asistencias_usuario)) {
if (asistencias_usuario > total_clases) {
stop("El número de asistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de asistencias, asignarlo directamente
return(rep(asistencias_usuario, n))
}
if (tipo == "inasistencias" && !is.null(inasistencias_usuario)) {
if (inasistencias_usuario > total_clases) {
stop("El número de inasistencias no puede ser mayor al número total de clases.")
}
# Si el usuario proporciona el número de inasistencias, asignarlo directamente
return(rep(inasistencias_usuario, n))
}
# Si no se proporcionan valores, generar números aleatorios
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)  # Asegurar que no exceda el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de clases
resultados[i] <- Xn %% (total_clases + 1)
if (resultados[i] > total_clases) {
resultados[i] <- total_clases  # Limitar las inasistencias al total de clases
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Método Congruencial Lineal (MCL) para generar números aleatorios
# Este script implementa el generador MCL para la simulación de asistencias e inasistencias en la universidad.
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_dias = 30) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Generar n números aleatorios utilizando el método MCL
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de días de clases
resultados[i] <- Xn %% (total_dias + 1)  # Asegurarse que el número de asistencias no supere el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de días de clases
resultados[i] <- Xn %% (total_dias + 1)
if (resultados[i] > total_dias) {
resultados[i] <- total_dias  # Limitar las inasistencias al total de días
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias donde el usuario determina el total de días de clases
total_dias <- 20  # Número total de días de clases (este es un ejemplo, el usuario puede cambiarlo)
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_dias = total_dias)
print(asistencias)
# Generar 10 números de inasistencias donde el usuario determina el total de días de clases
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_dias = total_dias)
print(inasistencias)
# Método Congruencial Lineal (MCL) para generar números aleatorios
# Este script implementa el generador MCL para la simulación de asistencias e inasistencias en la universidad.
# Función para generar números aleatorios utilizando el MCL
generar_mcl <- function(n, semilla, a, c, m, tipo = "asistencias", total_dias = 30) {
# Inicializar el vector para los resultados
resultados <- numeric(n)
# Establecer el primer valor como la semilla
Xn <- semilla
# Generar n números aleatorios utilizando el método MCL
for (i in 1:n) {
Xn <- (a * Xn + c) %% m  # Aplicar la fórmula del MCL
if (tipo == "asistencias") {
# Generar un número aleatorio de asistencias entre 0 y el total de días de clases
resultados[i] <- Xn %% (total_dias + 1)  # Asegurarse que el número de asistencias no supere el total de clases
} else if (tipo == "inasistencias") {
# Generar un número aleatorio de inasistencias entre 0 y el total de días de clases
resultados[i] <- Xn %% (total_dias + 1)
if (resultados[i] > total_dias) {
resultados[i] <- total_dias  # Limitar las inasistencias al total de días
}
} else {
stop("Tipo de dato no válido. Usa 'asistencias' o 'inasistencias'.")
}
}
return(resultados)
}
# Ejemplo de uso:
# Generar 10 números de asistencias donde el usuario determina el total de días de clases
total_dias <- 20  # Número total de días de clases (este es un ejemplo, el usuario puede cambiarlo)
asistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "asistencias", total_dias = total_dias)
print(asistencias)
# Generar 10 números de inasistencias donde el usuario determina el total de días de clases
inasistencias <- generar_mcl(10, semilla = 123, a = 1664525, c = 1013904223, m = 2^32, tipo = "inasistencias", total_dias = total_dias)
print(inasistencias)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
document()
library(devtools)
document()
install()
# Cargar la librería
library(mcl)
# Cargar la librería
library(mcl)
# Cargar la librería
library(mcl)
# Cargar la librería
library(mcl)
# Cargar la librería
library(ravenMCL)
# Generar datos de asistencias para 15 días de clase
asistencias <- generar_mcl(
n = 15,
semilla = 123,
a = 1664525,
c = 1013904223,
m = 2^32,
tipo = "asistencias",
total_dias = 15
)
# Generar datos de inasistencias para los mismos días
inasistencias <- generar_mcl(
n = 15,
semilla = 456,
a = 1664525,
c = 1013904223,
m = 2^32,
tipo = "inasistencias",
total_dias = 15
)
# Mostrar los resultados
print(data.frame(Día = 1:15, Asistencias = asistencias, Inasistencias = inasistencias))
# Cargar la librería
library(ravenMCL)
# Generar datos de asistencias para 15 días de clase
asistencias <- generar_mcl(
n = 15,
semilla = 123,
a = 1664525,
c = 1013904223,
m = 2^32,
tipo = "asistencias",
total_dias = 15
)
# Generar datos de inasistencias para los mismos días
inasistencias <- generar_mcl(
n = 15,
semilla = 456,
a = 1664525,
c = 1013904223,
m = 2^32,
tipo = "inasistencias",
total_dias = 15
)
# Mostrar los resultados
print(data.frame(Día = 1:150, Asistencias = asistencias, Inasistencias = inasistencias))
# Función para generar números aleatorios normalizados con LCG
generador_lcg <- function(semilla, a, c, m, n) {
resultados <- numeric(n)
x <- semilla
for (i in 1:n) {
x <- (a * x + c) %% m
resultados[i] <- x / m
}
return(resultados)
}
# Función para simular asistencias e inasistencias usando LCG
simular_asistencia_lcg <- function(n_estudiantes, total_dias, semilla, a, c, m, porcentaje_retiro = 0.3) {
# Generar n_estudiantes números aleatorios
aleatorios <- generador_lcg(semilla, a, c, m, n_estudiantes)
# Escalar al rango [0, total_dias]
asistencias <- floor(aleatorios * (total_dias + 1))  # Redondeo hacia abajo
inasistencias <- total_dias - asistencias
# Evaluar retiro
retirado <- ifelse(inasistencias / total_dias > porcentaje_retiro, "Sí", "No")
# Construir tabla
resultados <- data.frame(
Estudiante = 1:n_estudiantes,
Asistencias = asistencias,
Inasistencias = inasistencias,
Retirado = retirado
)
return(resultados)
}
# 📌 Ejecutar simulación para 10 estudiantes
set.seed(42)
tabla_asistencias <- simular_asistencia_lcg(
n_estudiantes = 10,
total_dias = 30,
semilla = 12345,
a = 1103515245,
c = 12345,
m = 2^31,
porcentaje_retiro = 0.3
)
# 📊 Mostrar tabla
print(tabla_asistencias)
#' Generador de números aleatorios usando el método congruencial lineal
#'
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param n Cantidad de números a generar
#' @return Vector de números aleatorios normalizados
#' @export
generador_lcg <- function(semilla, a, c, m, n) {
resultados <- numeric(n)
x <- semilla
for (i in 1:n) {
x <- (a * x + c) %% m
resultados[i] <- x / m
}
return(resultados)
}
#' Simula asistencias e inasistencias en base a números LCG
#'
#' @param n_estudiantes Número de estudiantes
#' @param total_dias Días de clase
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param porcentaje_retiro Umbral para retiro por inasistencias
#' @return Data frame con asistencias, inasistencias y estado de retiro
#' @export
simular_asistencia_lcg <- function(n_estudiantes, total_dias, semilla, a, c, m, porcentaje_retiro = 0.3) {
aleatorios <- generador_lcg(semilla, a, c, m, n_estudiantes)
asistencias <- floor(aleatorios * (total_dias + 1))
inasistencias <- total_dias - asistencias
retirado <- ifelse(inasistencias / total_dias > porcentaje_retiro, "Sí", "No")
resultados <- data.frame(
Estudiante = 1:n_estudiantes,
Asistencias = asistencias,
Inasistencias = inasistencias,
Retirado = retirado
)
return(resultados)
}
#' Generador de números aleatorios usando el método congruencial lineal
#'
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param n Cantidad de números a generar
#' @return Vector de números aleatorios normalizados
#' @export
generador_lcg <- function(semilla, a, c, m, n) {
resultados <- numeric(n)
x <- semilla
for (i in 1:n) {
x <- (a * x + c) %% m
resultados[i] <- x / m
}
return(resultados)
}
#' Simula asistencias e inasistencias en base a números LCG
#'
#' @param n_estudiantes Número de estudiantes
#' @param total_dias Días de clase
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param porcentaje_retiro Umbral para retiro por inasistencias
#' @return Data frame con asistencias, inasistencias y estado de retiro
#' @export
simular_asistencia_lcg <- function(n_estudiantes, total_dias, semilla, a, c, m, porcentaje_retiro = 0.3) {
aleatorios <- generador_lcg(semilla, a, c, m, n_estudiantes)
asistencias <- floor(aleatorios * (total_dias + 1))
inasistencias <- total_dias - asistencias
retirado <- ifelse(inasistencias / total_dias > porcentaje_retiro, "Sí", "No")
resultados <- data.frame(
Estudiante = 1:n_estudiantes,
Asistencias = asistencias,
Inasistencias = inasistencias,
Retirado = retirado
)
return(resultados)
}
#' Generador de números aleatorios usando el método congruencial lineal
#'
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param n Cantidad de números a generar
#' @return Vector de números aleatorios normalizados
#' @export
generador_lcg <- function(semilla, a, c, m, n) {
resultados <- numeric(n)
x <- semilla
for (i in 1:n) {
x <- (a * x + c) %% m
resultados[i] <- x / m
}
return(resultados)
}
#' Simula asistencias e inasistencias en base a números LCG
#'
#' @param n_estudiantes Número de estudiantes
#' @param total_dias Días de clase
#' @param semilla Valor inicial
#' @param a Multiplicador
#' @param c Incremento
#' @param m Módulo
#' @param porcentaje_retiro Umbral para retiro por inasistencias
#' @return Data frame con asistencias, inasistencias y estado de retiro
#' @export
simular_asistencia_lcg <- function(n_estudiantes, total_dias, semilla, a, c, m, porcentaje_retiro = 0.3) {
aleatorios <- generador_lcg(semilla, a, c, m, n_estudiantes)
asistencias <- floor(aleatorios * (total_dias + 1))
inasistencias <- total_dias - asistencias
retirado <- ifelse(inasistencias / total_dias > porcentaje_retiro, "Sí", "No")
resultados <- data.frame(
Estudiante = 1:n_estudiantes,
Asistencias = asistencias,
Inasistencias = inasistencias,
Retirado = retirado
)
return(resultados)
}
library(ravenMCL)
# Ahora puedes usar las funciones del paquete
tabla_asistencias <- simular_asistencia_lcg(
n_estudiantes = 10,
total_dias = 30,
semilla = 12345,
a = 1103515245,
c = 12345,
m = 2^31,
porcentaje_retiro = 0.3
)
print(tabla_asistencias)
library(devtools)
document()
load_all()
